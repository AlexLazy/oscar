// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$cart-name: 'cart'
$cart-x: 0px
$cart-y: 52px
$cart-offset-x: 0px
$cart-offset-y: -52px
$cart-width: 16px
$cart-height: 15px
$cart-total-width: 88px
$cart-total-height: 67px
$cart-image: '../img/sprite.png'
$cart: (0px, 52px, 0px, -52px, 16px, 15px, 88px, 67px, '../img/sprite.png', 'cart', )
$clock-name: 'clock'
$clock-x: 74px
$clock-y: 0px
$clock-offset-x: -74px
$clock-offset-y: 0px
$clock-width: 14px
$clock-height: 14px
$clock-total-width: 88px
$clock-total-height: 67px
$clock-image: '../img/sprite.png'
$clock: (74px, 0px, -74px, 0px, 14px, 14px, 88px, 67px, '../img/sprite.png', 'clock', )
$fb-name: 'fb'
$fb-x: 51px
$fb-y: 0px
$fb-offset-x: -51px
$fb-offset-y: 0px
$fb-width: 18px
$fb-height: 18px
$fb-total-width: 88px
$fb-total-height: 67px
$fb-image: '../img/sprite.png'
$fb: (51px, 0px, -51px, 0px, 18px, 18px, 88px, 67px, '../img/sprite.png', 'fb', )
$google-name: 'google'
$google-x: 0px
$google-y: 29px
$google-offset-x: 0px
$google-offset-y: -29px
$google-width: 18px
$google-height: 18px
$google-total-width: 88px
$google-total-height: 67px
$google-image: '../img/sprite.png'
$google: (0px, 29px, 0px, -29px, 18px, 18px, 88px, 67px, '../img/sprite.png', 'google', )
$insta-name: 'insta'
$insta-x: 23px
$insta-y: 29px
$insta-offset-x: -23px
$insta-offset-y: -29px
$insta-width: 18px
$insta-height: 18px
$insta-total-width: 88px
$insta-total-height: 67px
$insta-image: '../img/sprite.png'
$insta: (23px, 29px, -23px, -29px, 18px, 18px, 88px, 67px, '../img/sprite.png', 'insta', )
$lamp-name: 'lamp'
$lamp-x: 0px
$lamp-y: 0px
$lamp-offset-x: 0px
$lamp-offset-y: 0px
$lamp-width: 23px
$lamp-height: 24px
$lamp-total-width: 88px
$lamp-total-height: 67px
$lamp-image: '../img/sprite.png'
$lamp: (0px, 0px, 0px, 0px, 23px, 24px, 88px, 67px, '../img/sprite.png', 'lamp', )
$mail-name: 'mail'
$mail-x: 21px
$mail-y: 52px
$mail-offset-x: -21px
$mail-offset-y: -52px
$mail-width: 14px
$mail-height: 14px
$mail-total-width: 88px
$mail-total-height: 67px
$mail-image: '../img/sprite.png'
$mail: (21px, 52px, -21px, -52px, 14px, 14px, 88px, 67px, '../img/sprite.png', 'mail', )
$phone-name: 'phone'
$phone-x: 40px
$phone-y: 52px
$phone-offset-x: -40px
$phone-offset-y: -52px
$phone-width: 14px
$phone-height: 14px
$phone-total-width: 88px
$phone-total-height: 67px
$phone-image: '../img/sprite.png'
$phone: (40px, 52px, -40px, -52px, 14px, 14px, 88px, 67px, '../img/sprite.png', 'phone', )
$pin-name: 'pin'
$pin-x: 74px
$pin-y: 19px
$pin-offset-x: -74px
$pin-offset-y: -19px
$pin-width: 10px
$pin-height: 14px
$pin-total-width: 88px
$pin-total-height: 67px
$pin-image: '../img/sprite.png'
$pin: (74px, 19px, -74px, -19px, 10px, 14px, 88px, 67px, '../img/sprite.png', 'pin', )
$twitter-name: 'twitter'
$twitter-x: 46px
$twitter-y: 29px
$twitter-offset-x: -46px
$twitter-offset-y: -29px
$twitter-width: 18px
$twitter-height: 18px
$twitter-total-width: 88px
$twitter-total-height: 67px
$twitter-image: '../img/sprite.png'
$twitter: (46px, 29px, -46px, -29px, 18px, 18px, 88px, 67px, '../img/sprite.png', 'twitter', )
$vk-name: 'vk'
$vk-x: 28px
$vk-y: 0px
$vk-offset-x: -28px
$vk-offset-y: 0px
$vk-width: 18px
$vk-height: 18px
$vk-total-width: 88px
$vk-total-height: 67px
$vk-image: '../img/sprite.png'
$vk: (28px, 0px, -28px, 0px, 18px, 18px, 88px, 67px, '../img/sprite.png', 'vk', )
$spritesheet-width: 88px
$spritesheet-height: 67px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($cart, $clock, $fb, $google, $insta, $lamp, $mail, $phone, $pin, $twitter, $vk, )
$spritesheet: (88px, 67px, '../img/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
